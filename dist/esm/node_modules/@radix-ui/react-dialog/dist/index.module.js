import { Slot } from '../../react-slot/dist/index.module.js';
import { hideOthers } from '../../../aria-hidden/dist/es2015/index.js';
import o from '../../../react-remove-scroll/dist/es2015/Combination.js';
import { useFocusGuards } from '../../react-focus-guards/dist/index.module.js';
import { Primitive } from '../../react-primitive/dist/index.module.js';
import { Presence } from '../../react-presence/dist/index.module.js';
import { FocusScope } from '../../react-focus-scope/dist/index.module.js';
import { DismissableLayer } from '../../react-dismissable-layer/dist/index.module.js';
import { useControllableState } from '../../react-use-controllable-state/dist/index.module.js';
import { useId } from '../../react-id/dist/index.module.js';
import { createContextScope } from '../../react-context/dist/index.module.js';
import { useComposedRefs } from '../../react-compose-refs/dist/index.module.js';
import { composeEventHandlers } from '../../primitive/dist/index.module.js';
import * as React from 'react';
import _extends from '../../../@babel/runtime/helpers/esm/extends.js';

const [x,C]=createContextScope("Dialog");const[v,E]=x("Dialog");const Dialog=e=>{const{__scopeDialog:o,children:t,open:r,defaultOpen:n,onOpenChange:a,modal:i=!0,allowPinchZoom:l}=e,c=React.useRef(null),p=React.useRef(null),[d=!1,f]=useControllableState({prop:r,defaultProp:n,onChange:a});return React.createElement(v,{scope:o,triggerRef:c,contentRef:p,contentId:useId(),titleId:useId(),descriptionId:useId(),open:d,onOpenChange:f,onOpenToggle:React.useCallback((()=>f((e=>!e))),[f]),modal:i,allowPinchZoom:l},t)};const DialogTrigger=/*#__PURE__*/React.forwardRef(((e,o)=>{const{__scopeDialog:t,...r}=e,a=E("DialogTrigger",t),i=useComposedRefs(o,a.triggerRef);return React.createElement(Primitive.button,_extends({type:"button","aria-haspopup":"dialog","aria-expanded":a.open,"aria-controls":a.contentId,"data-state":b(a.open)},r,{ref:i,onClick:composeEventHandlers(e.onClick,a.onOpenToggle)}))}));const DialogOverlay=/*#__PURE__*/React.forwardRef(((e,o)=>{const{forceMount:t,...r}=e,n=E("DialogOverlay",e.__scopeDialog);return n.modal?/*#__PURE__*/React.createElement(Presence,{present:t||n.open},/*#__PURE__*/React.createElement(R,_extends({},r,{ref:o}))):null}));const R=/*#__PURE__*/React.forwardRef(((o$1,r)=>{const{__scopeDialog:a,...i}=o$1,l=E("DialogOverlay",a);return React.createElement(o,{as:Slot,allowPinchZoom:l.allowPinchZoom,shards:[l.contentRef]},/*#__PURE__*/React.createElement(Primitive.div,_extends({"data-state":b(l.open)},i,{ref:r,style:{pointerEvents:"auto",...i.style}})))}));const DialogContent=/*#__PURE__*/React.forwardRef(((e,o)=>{const{forceMount:t,...r}=e,n=E("DialogContent",e.__scopeDialog);return React.createElement(Presence,{present:t||n.open},n.modal?/*#__PURE__*/React.createElement(_,_extends({},r,{ref:o})):/*#__PURE__*/React.createElement(O,_extends({},r,{ref:o})))}));const _=/*#__PURE__*/React.forwardRef(((e,t)=>{const r=E("DialogContent",e.__scopeDialog),n=React.useRef(null),a=useComposedRefs(t,r.contentRef,n);return React.useEffect((()=>{const e=n.current;if(e)return hideOthers(e)}),[]),/*#__PURE__*/React.createElement(h,_extends({},e,{ref:a,trapFocus:r.open,disableOutsidePointerEvents:!0,onCloseAutoFocus:composeEventHandlers(e.onCloseAutoFocus,(e=>{var o;e.preventDefault(),null===(o=r.triggerRef.current)||void 0===o||o.focus();})),onPointerDownOutside:composeEventHandlers(e.onPointerDownOutside,(e=>{const o=e.detail.originalEvent,t=0===o.button&&!0===o.ctrlKey;(2===o.button||t)&&e.preventDefault();})),onFocusOutside:composeEventHandlers(e.onFocusOutside,(e=>e.preventDefault()))}))})),O=/*#__PURE__*/React.forwardRef(((e,o)=>{const t=E("DialogContent",e.__scopeDialog),r=React.useRef(!1);return React.createElement(h,_extends({},e,{ref:o,trapFocus:!1,disableOutsidePointerEvents:!1,onCloseAutoFocus:o=>{var n,a;(null===(n=e.onCloseAutoFocus)||void 0===n||n.call(e,o),o.defaultPrevented)||(r.current||null===(a=t.triggerRef.current)||void 0===a||a.focus(),o.preventDefault());r.current=!1;},onInteractOutside:o=>{var n,a;null===(n=e.onInteractOutside)||void 0===n||n.call(e,o),o.defaultPrevented||(r.current=!0);const i=o.target;(null===(a=t.triggerRef.current)||void 0===a?void 0:a.contains(i))&&o.preventDefault();}}))})),h=/*#__PURE__*/React.forwardRef(((e,o)=>{const{__scopeDialog:t,trapFocus:n,onOpenAutoFocus:a,onCloseAutoFocus:i,...s}=e,u=E("DialogContent",t),p=React.useRef(null),d=useComposedRefs(o,p);return useFocusGuards(),/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(FocusScope,{asChild:!0,loop:!0,trapped:n,onMountAutoFocus:a,onUnmountAutoFocus:i},/*#__PURE__*/React.createElement(DismissableLayer,_extends({role:"dialog",id:u.contentId,"aria-describedby":u.descriptionId,"aria-labelledby":u.titleId,"data-state":b(u.open)},s,{ref:d,onDismiss:()=>u.onOpenChange(!1)}))),!1)}));function b(e){return e?"open":"closed"}const Root=Dialog;const Trigger=DialogTrigger;const Overlay=DialogOverlay;const Content=DialogContent;

export { Content, Dialog, DialogContent, DialogOverlay, DialogTrigger, Overlay, Root, Trigger, C as createDialogScope };
