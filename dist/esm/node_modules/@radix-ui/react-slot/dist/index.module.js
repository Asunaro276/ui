import { composeRefs } from '../../react-compose-refs/dist/index.module.js';
import * as React from 'react';
import _extends from '../../../@babel/runtime/helpers/esm/extends.js';

const Slot=/*#__PURE__*/React.forwardRef(((e,o)=>{const{children:a,...s}=e;return React.Children.toArray(a).some(l)?/*#__PURE__*/React.createElement(React.Fragment,null,React.Children.map(a,(e=>l(e)?/*#__PURE__*/React.createElement(n,_extends({},s,{ref:o}),e.props.children):e))):/*#__PURE__*/React.createElement(n,_extends({},s,{ref:o}),a)}));Slot.displayName="Slot";const n=/*#__PURE__*/React.forwardRef(((r,n)=>{const{children:l,...a}=r;return React.isValidElement(l)?/*#__PURE__*/React.cloneElement(l,{...o(a,l.props),ref:composeRefs(n,l.ref)}):React.Children.count(l)>1?React.Children.only(null):null}));n.displayName="SlotClone";const Slottable=({children:e})=>/*#__PURE__*/React.createElement(React.Fragment,null,e);function l(e){return React.isValidElement(e)&&e.type===Slottable}function o(e,t){const r={...t};for(const n in t){const l=e[n],o=t[n];/^on[A-Z]/.test(n)?r[n]=(...e)=>{null==o||o(...e),null==l||l(...e);}:"style"===n?r[n]={...l,...o}:"className"===n&&(r[n]=[l,o].filter(Boolean).join(" "));}return {...e,...r}}

export { Slot, Slottable };
